// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file metric.proto

import Foundation
import ProtocolBuffers


public extension Events{}

public func == (lhs: Events.ValueMetric, rhs: Events.ValueMetric) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  fieldCheck = fieldCheck && (lhs.hasUnit == rhs.hasUnit) && (!lhs.hasUnit || lhs.unit == rhs.unit)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Events.CounterEvent, rhs: Events.CounterEvent) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasDelta == rhs.hasDelta) && (!lhs.hasDelta || lhs.delta == rhs.delta)
  fieldCheck = fieldCheck && (lhs.hasTotal == rhs.hasTotal) && (!lhs.hasTotal || lhs.total == rhs.total)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Events.ContainerMetric, rhs: Events.ContainerMetric) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasApplicationId == rhs.hasApplicationId) && (!lhs.hasApplicationId || lhs.applicationId == rhs.applicationId)
  fieldCheck = fieldCheck && (lhs.hasInstanceIndex == rhs.hasInstanceIndex) && (!lhs.hasInstanceIndex || lhs.instanceIndex == rhs.instanceIndex)
  fieldCheck = fieldCheck && (lhs.hasCpuPercentage == rhs.hasCpuPercentage) && (!lhs.hasCpuPercentage || lhs.cpuPercentage == rhs.cpuPercentage)
  fieldCheck = fieldCheck && (lhs.hasMemoryBytes == rhs.hasMemoryBytes) && (!lhs.hasMemoryBytes || lhs.memoryBytes == rhs.memoryBytes)
  fieldCheck = fieldCheck && (lhs.hasDiskBytes == rhs.hasDiskBytes) && (!lhs.hasDiskBytes || lhs.diskBytes == rhs.diskBytes)
  fieldCheck = fieldCheck && (lhs.hasMemoryBytesQuota == rhs.hasMemoryBytesQuota) && (!lhs.hasMemoryBytesQuota || lhs.memoryBytesQuota == rhs.memoryBytesQuota)
  fieldCheck = fieldCheck && (lhs.hasDiskBytesQuota == rhs.hasDiskBytesQuota) && (!lhs.hasDiskBytesQuota || lhs.diskBytesQuota == rhs.diskBytesQuota)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Events {
  public struct MetricRoot {
    public static var sharedInstance : MetricRoot {
     struct Static {
         static let instance : MetricRoot = MetricRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Events.UuidRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  /// A ValueMetric indicates the value of a metric at an instant in time.
  final public class ValueMetric : GeneratedMessage, GeneratedMessageProtocol {
    /// Name of the metric. Must be consistent for downstream consumers to associate events semantically.
    public private(set) var name:String = ""

    public private(set) var hasName:Bool = false
    /// Value at the time of event emission.
    public private(set) var value:Double = Double(0)

    public private(set) var hasValue:Bool = false
    /// Unit of the metric. Please see http://metrics20.org/spec/#units for ideas; SI units/prefixes are recommended where applicable. Should be consistent for the life of the metric (consumers are expected to report, but not interpret, prefixes).
    public private(set) var unit:String = ""

    public private(set) var hasUnit:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasName {
        return false
      }
      if !hasValue {
        return false
      }
      if !hasUnit {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasName {
        try output.writeString(1, value:name)
      }
      if hasValue {
        try output.writeDouble(2, value:value)
      }
      if hasUnit {
        try output.writeString(3, value:unit)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasName {
        serialize_size += name.computeStringSize(1)
      }
      if hasValue {
        serialize_size += value.computeDoubleSize(2)
      }
      if hasUnit {
        serialize_size += unit.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Events.ValueMetric> {
      var mergedArray = Array<Events.ValueMetric>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Events.ValueMetric? {
      return try Events.ValueMetric.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Events.ValueMetric {
      return try Events.ValueMetric.Builder().mergeFromData(data, extensionRegistry:Events.MetricRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Events.ValueMetric {
      return try Events.ValueMetric.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Events.ValueMetric {
      return try Events.ValueMetric.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.ValueMetric {
      return try Events.ValueMetric.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Events.ValueMetric {
      return try Events.ValueMetric.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.ValueMetric {
      return try Events.ValueMetric.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Events.ValueMetric.Builder {
      return Events.ValueMetric.classBuilder() as! Events.ValueMetric.Builder
    }
    public func getBuilder() -> Events.ValueMetric.Builder {
      return classBuilder() as! Events.ValueMetric.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Events.ValueMetric.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Events.ValueMetric.Builder()
    }
    public func toBuilder() throws -> Events.ValueMetric.Builder {
      return try Events.ValueMetric.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Events.ValueMetric) throws -> Events.ValueMetric.Builder {
      return try Events.ValueMetric.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasValue {
        output += "\(indent) value: \(value) \n"
      }
      if hasUnit {
        output += "\(indent) unit: \(unit) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasValue {
               hashCode = (hashCode &* 31) &+ value.hashValue
            }
            if hasUnit {
               hashCode = (hashCode &* 31) &+ unit.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Events.ValueMetric"
    }
    override public func className() -> String {
        return "Events.ValueMetric"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Events.ValueMetric.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Events.ValueMetric = Events.ValueMetric()
      public func getMessage() -> Events.ValueMetric {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Events.ValueMetric.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Events.ValueMetric.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasValue:Bool {
           get {
                return builderResult.hasValue
           }
      }
      public var value:Double {
           get {
                return builderResult.value
           }
           set (value) {
               builderResult.hasValue = true
               builderResult.value = value
           }
      }
      public func setValue(value:Double) -> Events.ValueMetric.Builder {
        self.value = value
        return self
      }
      public func clearValue() -> Events.ValueMetric.Builder{
           builderResult.hasValue = false
           builderResult.value = Double(0)
           return self
      }
      public var hasUnit:Bool {
           get {
                return builderResult.hasUnit
           }
      }
      public var unit:String {
           get {
                return builderResult.unit
           }
           set (value) {
               builderResult.hasUnit = true
               builderResult.unit = value
           }
      }
      public func setUnit(value:String) -> Events.ValueMetric.Builder {
        self.unit = value
        return self
      }
      public func clearUnit() -> Events.ValueMetric.Builder{
           builderResult.hasUnit = false
           builderResult.unit = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Events.ValueMetric.Builder {
        builderResult = Events.ValueMetric()
        return self
      }
      public override func clone() throws -> Events.ValueMetric.Builder {
        return try Events.ValueMetric.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Events.ValueMetric {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Events.ValueMetric {
        let returnMe:Events.ValueMetric = builderResult
        return returnMe
      }
      public func mergeFrom(other:Events.ValueMetric) throws -> Events.ValueMetric.Builder {
        if other == Events.ValueMetric() {
         return self
        }
        if other.hasName {
             name = other.name
        }
        if other.hasValue {
             value = other.value
        }
        if other.hasUnit {
             unit = other.unit
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Events.ValueMetric.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.ValueMetric.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            name = try input.readString()

          case 17 :
            value = try input.readDouble()

          case 26 :
            unit = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  /// A CounterEvent represents the increment of a counter. It contains only the change in the value; it is the responsibility of downstream consumers to maintain the value of the counter.
  final public class CounterEvent : GeneratedMessage, GeneratedMessageProtocol {
    /// Name of the counter. Must be consistent for downstream consumers to associate events semantically.
    public private(set) var name:String = ""

    public private(set) var hasName:Bool = false
    /// Amount by which to increment the counter.
    public private(set) var delta:UInt64 = UInt64(0)

    public private(set) var hasDelta:Bool = false
    /// Total value of the counter. This will be overridden by Metron, which internally tracks the total of each named Counter it receives.
    public private(set) var total:UInt64 = UInt64(0)

    public private(set) var hasTotal:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasName {
        return false
      }
      if !hasDelta {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasName {
        try output.writeString(1, value:name)
      }
      if hasDelta {
        try output.writeUInt64(2, value:delta)
      }
      if hasTotal {
        try output.writeUInt64(3, value:total)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasName {
        serialize_size += name.computeStringSize(1)
      }
      if hasDelta {
        serialize_size += delta.computeUInt64Size(2)
      }
      if hasTotal {
        serialize_size += total.computeUInt64Size(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Events.CounterEvent> {
      var mergedArray = Array<Events.CounterEvent>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Events.CounterEvent? {
      return try Events.CounterEvent.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Events.CounterEvent {
      return try Events.CounterEvent.Builder().mergeFromData(data, extensionRegistry:Events.MetricRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Events.CounterEvent {
      return try Events.CounterEvent.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Events.CounterEvent {
      return try Events.CounterEvent.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.CounterEvent {
      return try Events.CounterEvent.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Events.CounterEvent {
      return try Events.CounterEvent.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.CounterEvent {
      return try Events.CounterEvent.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Events.CounterEvent.Builder {
      return Events.CounterEvent.classBuilder() as! Events.CounterEvent.Builder
    }
    public func getBuilder() -> Events.CounterEvent.Builder {
      return classBuilder() as! Events.CounterEvent.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Events.CounterEvent.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Events.CounterEvent.Builder()
    }
    public func toBuilder() throws -> Events.CounterEvent.Builder {
      return try Events.CounterEvent.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Events.CounterEvent) throws -> Events.CounterEvent.Builder {
      return try Events.CounterEvent.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasDelta {
        output += "\(indent) delta: \(delta) \n"
      }
      if hasTotal {
        output += "\(indent) total: \(total) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasDelta {
               hashCode = (hashCode &* 31) &+ delta.hashValue
            }
            if hasTotal {
               hashCode = (hashCode &* 31) &+ total.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Events.CounterEvent"
    }
    override public func className() -> String {
        return "Events.CounterEvent"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Events.CounterEvent.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Events.CounterEvent = Events.CounterEvent()
      public func getMessage() -> Events.CounterEvent {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Events.CounterEvent.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Events.CounterEvent.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasDelta:Bool {
           get {
                return builderResult.hasDelta
           }
      }
      public var delta:UInt64 {
           get {
                return builderResult.delta
           }
           set (value) {
               builderResult.hasDelta = true
               builderResult.delta = value
           }
      }
      public func setDelta(value:UInt64) -> Events.CounterEvent.Builder {
        self.delta = value
        return self
      }
      public func clearDelta() -> Events.CounterEvent.Builder{
           builderResult.hasDelta = false
           builderResult.delta = UInt64(0)
           return self
      }
      public var hasTotal:Bool {
           get {
                return builderResult.hasTotal
           }
      }
      public var total:UInt64 {
           get {
                return builderResult.total
           }
           set (value) {
               builderResult.hasTotal = true
               builderResult.total = value
           }
      }
      public func setTotal(value:UInt64) -> Events.CounterEvent.Builder {
        self.total = value
        return self
      }
      public func clearTotal() -> Events.CounterEvent.Builder{
           builderResult.hasTotal = false
           builderResult.total = UInt64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Events.CounterEvent.Builder {
        builderResult = Events.CounterEvent()
        return self
      }
      public override func clone() throws -> Events.CounterEvent.Builder {
        return try Events.CounterEvent.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Events.CounterEvent {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Events.CounterEvent {
        let returnMe:Events.CounterEvent = builderResult
        return returnMe
      }
      public func mergeFrom(other:Events.CounterEvent) throws -> Events.CounterEvent.Builder {
        if other == Events.CounterEvent() {
         return self
        }
        if other.hasName {
             name = other.name
        }
        if other.hasDelta {
             delta = other.delta
        }
        if other.hasTotal {
             total = other.total
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Events.CounterEvent.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.CounterEvent.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            name = try input.readString()

          case 16 :
            delta = try input.readUInt64()

          case 24 :
            total = try input.readUInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  /// A ContainerMetric records resource usage of an app in a container.
  final public class ContainerMetric : GeneratedMessage, GeneratedMessageProtocol {
    /// ID of the contained application.
    public private(set) var applicationId:String = ""

    public private(set) var hasApplicationId:Bool = false
    /// Instance index of the contained application. (This, with applicationId, should uniquely identify a container.)
    public private(set) var instanceIndex:Int32 = Int32(0)

    public private(set) var hasInstanceIndex:Bool = false
    /// CPU used, on a scale of 0 to 100.
    public private(set) var cpuPercentage:Double = Double(0)

    public private(set) var hasCpuPercentage:Bool = false
    /// Bytes of memory used.
    public private(set) var memoryBytes:UInt64 = UInt64(0)

    public private(set) var hasMemoryBytes:Bool = false
    /// Bytes of disk used.
    public private(set) var diskBytes:UInt64 = UInt64(0)

    public private(set) var hasDiskBytes:Bool = false
    /// Maximum bytes of memory allocated to container.
    public private(set) var memoryBytesQuota:UInt64 = UInt64(0)

    public private(set) var hasMemoryBytesQuota:Bool = false
    /// Maximum bytes of disk allocated to container.
    public private(set) var diskBytesQuota:UInt64 = UInt64(0)

    public private(set) var hasDiskBytesQuota:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasApplicationId {
        return false
      }
      if !hasInstanceIndex {
        return false
      }
      if !hasCpuPercentage {
        return false
      }
      if !hasMemoryBytes {
        return false
      }
      if !hasDiskBytes {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasApplicationId {
        try output.writeString(1, value:applicationId)
      }
      if hasInstanceIndex {
        try output.writeInt32(2, value:instanceIndex)
      }
      if hasCpuPercentage {
        try output.writeDouble(3, value:cpuPercentage)
      }
      if hasMemoryBytes {
        try output.writeUInt64(4, value:memoryBytes)
      }
      if hasDiskBytes {
        try output.writeUInt64(5, value:diskBytes)
      }
      if hasMemoryBytesQuota {
        try output.writeUInt64(6, value:memoryBytesQuota)
      }
      if hasDiskBytesQuota {
        try output.writeUInt64(7, value:diskBytesQuota)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasApplicationId {
        serialize_size += applicationId.computeStringSize(1)
      }
      if hasInstanceIndex {
        serialize_size += instanceIndex.computeInt32Size(2)
      }
      if hasCpuPercentage {
        serialize_size += cpuPercentage.computeDoubleSize(3)
      }
      if hasMemoryBytes {
        serialize_size += memoryBytes.computeUInt64Size(4)
      }
      if hasDiskBytes {
        serialize_size += diskBytes.computeUInt64Size(5)
      }
      if hasMemoryBytesQuota {
        serialize_size += memoryBytesQuota.computeUInt64Size(6)
      }
      if hasDiskBytesQuota {
        serialize_size += diskBytesQuota.computeUInt64Size(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Events.ContainerMetric> {
      var mergedArray = Array<Events.ContainerMetric>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Events.ContainerMetric? {
      return try Events.ContainerMetric.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Events.ContainerMetric {
      return try Events.ContainerMetric.Builder().mergeFromData(data, extensionRegistry:Events.MetricRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Events.ContainerMetric {
      return try Events.ContainerMetric.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Events.ContainerMetric {
      return try Events.ContainerMetric.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.ContainerMetric {
      return try Events.ContainerMetric.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Events.ContainerMetric {
      return try Events.ContainerMetric.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.ContainerMetric {
      return try Events.ContainerMetric.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Events.ContainerMetric.Builder {
      return Events.ContainerMetric.classBuilder() as! Events.ContainerMetric.Builder
    }
    public func getBuilder() -> Events.ContainerMetric.Builder {
      return classBuilder() as! Events.ContainerMetric.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Events.ContainerMetric.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Events.ContainerMetric.Builder()
    }
    public func toBuilder() throws -> Events.ContainerMetric.Builder {
      return try Events.ContainerMetric.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Events.ContainerMetric) throws -> Events.ContainerMetric.Builder {
      return try Events.ContainerMetric.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasApplicationId {
        output += "\(indent) applicationId: \(applicationId) \n"
      }
      if hasInstanceIndex {
        output += "\(indent) instanceIndex: \(instanceIndex) \n"
      }
      if hasCpuPercentage {
        output += "\(indent) cpuPercentage: \(cpuPercentage) \n"
      }
      if hasMemoryBytes {
        output += "\(indent) memoryBytes: \(memoryBytes) \n"
      }
      if hasDiskBytes {
        output += "\(indent) diskBytes: \(diskBytes) \n"
      }
      if hasMemoryBytesQuota {
        output += "\(indent) memoryBytesQuota: \(memoryBytesQuota) \n"
      }
      if hasDiskBytesQuota {
        output += "\(indent) diskBytesQuota: \(diskBytesQuota) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasApplicationId {
               hashCode = (hashCode &* 31) &+ applicationId.hashValue
            }
            if hasInstanceIndex {
               hashCode = (hashCode &* 31) &+ instanceIndex.hashValue
            }
            if hasCpuPercentage {
               hashCode = (hashCode &* 31) &+ cpuPercentage.hashValue
            }
            if hasMemoryBytes {
               hashCode = (hashCode &* 31) &+ memoryBytes.hashValue
            }
            if hasDiskBytes {
               hashCode = (hashCode &* 31) &+ diskBytes.hashValue
            }
            if hasMemoryBytesQuota {
               hashCode = (hashCode &* 31) &+ memoryBytesQuota.hashValue
            }
            if hasDiskBytesQuota {
               hashCode = (hashCode &* 31) &+ diskBytesQuota.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Events.ContainerMetric"
    }
    override public func className() -> String {
        return "Events.ContainerMetric"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Events.ContainerMetric.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Events.ContainerMetric = Events.ContainerMetric()
      public func getMessage() -> Events.ContainerMetric {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasApplicationId:Bool {
           get {
                return builderResult.hasApplicationId
           }
      }
      public var applicationId:String {
           get {
                return builderResult.applicationId
           }
           set (value) {
               builderResult.hasApplicationId = true
               builderResult.applicationId = value
           }
      }
      public func setApplicationId(value:String) -> Events.ContainerMetric.Builder {
        self.applicationId = value
        return self
      }
      public func clearApplicationId() -> Events.ContainerMetric.Builder{
           builderResult.hasApplicationId = false
           builderResult.applicationId = ""
           return self
      }
      public var hasInstanceIndex:Bool {
           get {
                return builderResult.hasInstanceIndex
           }
      }
      public var instanceIndex:Int32 {
           get {
                return builderResult.instanceIndex
           }
           set (value) {
               builderResult.hasInstanceIndex = true
               builderResult.instanceIndex = value
           }
      }
      public func setInstanceIndex(value:Int32) -> Events.ContainerMetric.Builder {
        self.instanceIndex = value
        return self
      }
      public func clearInstanceIndex() -> Events.ContainerMetric.Builder{
           builderResult.hasInstanceIndex = false
           builderResult.instanceIndex = Int32(0)
           return self
      }
      public var hasCpuPercentage:Bool {
           get {
                return builderResult.hasCpuPercentage
           }
      }
      public var cpuPercentage:Double {
           get {
                return builderResult.cpuPercentage
           }
           set (value) {
               builderResult.hasCpuPercentage = true
               builderResult.cpuPercentage = value
           }
      }
      public func setCpuPercentage(value:Double) -> Events.ContainerMetric.Builder {
        self.cpuPercentage = value
        return self
      }
      public func clearCpuPercentage() -> Events.ContainerMetric.Builder{
           builderResult.hasCpuPercentage = false
           builderResult.cpuPercentage = Double(0)
           return self
      }
      public var hasMemoryBytes:Bool {
           get {
                return builderResult.hasMemoryBytes
           }
      }
      public var memoryBytes:UInt64 {
           get {
                return builderResult.memoryBytes
           }
           set (value) {
               builderResult.hasMemoryBytes = true
               builderResult.memoryBytes = value
           }
      }
      public func setMemoryBytes(value:UInt64) -> Events.ContainerMetric.Builder {
        self.memoryBytes = value
        return self
      }
      public func clearMemoryBytes() -> Events.ContainerMetric.Builder{
           builderResult.hasMemoryBytes = false
           builderResult.memoryBytes = UInt64(0)
           return self
      }
      public var hasDiskBytes:Bool {
           get {
                return builderResult.hasDiskBytes
           }
      }
      public var diskBytes:UInt64 {
           get {
                return builderResult.diskBytes
           }
           set (value) {
               builderResult.hasDiskBytes = true
               builderResult.diskBytes = value
           }
      }
      public func setDiskBytes(value:UInt64) -> Events.ContainerMetric.Builder {
        self.diskBytes = value
        return self
      }
      public func clearDiskBytes() -> Events.ContainerMetric.Builder{
           builderResult.hasDiskBytes = false
           builderResult.diskBytes = UInt64(0)
           return self
      }
      public var hasMemoryBytesQuota:Bool {
           get {
                return builderResult.hasMemoryBytesQuota
           }
      }
      public var memoryBytesQuota:UInt64 {
           get {
                return builderResult.memoryBytesQuota
           }
           set (value) {
               builderResult.hasMemoryBytesQuota = true
               builderResult.memoryBytesQuota = value
           }
      }
      public func setMemoryBytesQuota(value:UInt64) -> Events.ContainerMetric.Builder {
        self.memoryBytesQuota = value
        return self
      }
      public func clearMemoryBytesQuota() -> Events.ContainerMetric.Builder{
           builderResult.hasMemoryBytesQuota = false
           builderResult.memoryBytesQuota = UInt64(0)
           return self
      }
      public var hasDiskBytesQuota:Bool {
           get {
                return builderResult.hasDiskBytesQuota
           }
      }
      public var diskBytesQuota:UInt64 {
           get {
                return builderResult.diskBytesQuota
           }
           set (value) {
               builderResult.hasDiskBytesQuota = true
               builderResult.diskBytesQuota = value
           }
      }
      public func setDiskBytesQuota(value:UInt64) -> Events.ContainerMetric.Builder {
        self.diskBytesQuota = value
        return self
      }
      public func clearDiskBytesQuota() -> Events.ContainerMetric.Builder{
           builderResult.hasDiskBytesQuota = false
           builderResult.diskBytesQuota = UInt64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Events.ContainerMetric.Builder {
        builderResult = Events.ContainerMetric()
        return self
      }
      public override func clone() throws -> Events.ContainerMetric.Builder {
        return try Events.ContainerMetric.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Events.ContainerMetric {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Events.ContainerMetric {
        let returnMe:Events.ContainerMetric = builderResult
        return returnMe
      }
      public func mergeFrom(other:Events.ContainerMetric) throws -> Events.ContainerMetric.Builder {
        if other == Events.ContainerMetric() {
         return self
        }
        if other.hasApplicationId {
             applicationId = other.applicationId
        }
        if other.hasInstanceIndex {
             instanceIndex = other.instanceIndex
        }
        if other.hasCpuPercentage {
             cpuPercentage = other.cpuPercentage
        }
        if other.hasMemoryBytes {
             memoryBytes = other.memoryBytes
        }
        if other.hasDiskBytes {
             diskBytes = other.diskBytes
        }
        if other.hasMemoryBytesQuota {
             memoryBytesQuota = other.memoryBytesQuota
        }
        if other.hasDiskBytesQuota {
             diskBytesQuota = other.diskBytesQuota
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Events.ContainerMetric.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.ContainerMetric.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            applicationId = try input.readString()

          case 16 :
            instanceIndex = try input.readInt32()

          case 25 :
            cpuPercentage = try input.readDouble()

          case 32 :
            memoryBytes = try input.readUInt64()

          case 40 :
            diskBytes = try input.readUInt64()

          case 48 :
            memoryBytesQuota = try input.readUInt64()

          case 56 :
            diskBytesQuota = try input.readUInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
