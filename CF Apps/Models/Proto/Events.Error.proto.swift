// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file error.proto

import Foundation
import ProtocolBuffers


public extension Events{}

public func == (lhs: Events.Error, rhs: Events.Error) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSource == rhs.hasSource) && (!lhs.hasSource || lhs.source == rhs.source)
  fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
  fieldCheck = fieldCheck && (lhs.hasMessage_ == rhs.hasMessage_) && (!lhs.hasMessage_ || lhs.message_ == rhs.message_)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Events {
  public struct ErrorRoot {
    public static var sharedInstance : ErrorRoot {
     struct Static {
         static let instance : ErrorRoot = ErrorRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  /// An Error event represents an error in the originating process.
  final public class Error : GeneratedMessage, GeneratedMessageProtocol {
    /// Source of the error. This may or may not be the same as the Origin in the envelope.
    public private(set) var source:String = ""

    public private(set) var hasSource:Bool = false
    /// Numeric error code. This is provided for programmatic responses to the error.
    public private(set) var code:Int32 = Int32(0)

    public private(set) var hasCode:Bool = false
    /// Error description (preferably human-readable).
    public private(set) var message_:String = ""

    public private(set) var hasMessage_:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasSource {
        return false
      }
      if !hasCode {
        return false
      }
      if !hasMessage_ {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasSource {
        try output.writeString(1, value:source)
      }
      if hasCode {
        try output.writeInt32(2, value:code)
      }
      if hasMessage_ {
        try output.writeString(3, value:message_)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSource {
        serialize_size += source.computeStringSize(1)
      }
      if hasCode {
        serialize_size += code.computeInt32Size(2)
      }
      if hasMessage_ {
        serialize_size += message_.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Events.Error> {
      var mergedArray = Array<Events.Error>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Events.Error? {
      return try Events.Error.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Events.Error {
      return try Events.Error.Builder().mergeFromData(data, extensionRegistry:Events.ErrorRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Events.Error {
      return try Events.Error.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Events.Error {
      return try Events.Error.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.Error {
      return try Events.Error.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Events.Error {
      return try Events.Error.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.Error {
      return try Events.Error.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Events.Error.Builder {
      return Events.Error.classBuilder() as! Events.Error.Builder
    }
    public func getBuilder() -> Events.Error.Builder {
      return classBuilder() as! Events.Error.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Events.Error.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Events.Error.Builder()
    }
    public func toBuilder() throws -> Events.Error.Builder {
      return try Events.Error.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Events.Error) throws -> Events.Error.Builder {
      return try Events.Error.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasSource {
        output += "\(indent) source: \(source) \n"
      }
      if hasCode {
        output += "\(indent) code: \(code) \n"
      }
      if hasMessage_ {
        output += "\(indent) message_: \(message_) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSource {
               hashCode = (hashCode &* 31) &+ source.hashValue
            }
            if hasCode {
               hashCode = (hashCode &* 31) &+ code.hashValue
            }
            if hasMessage_ {
               hashCode = (hashCode &* 31) &+ message_.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Events.Error"
    }
    override public func className() -> String {
        return "Events.Error"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Events.Error.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Events.Error = Events.Error()
      public func getMessage() -> Events.Error {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSource:Bool {
           get {
                return builderResult.hasSource
           }
      }
      public var source:String {
           get {
                return builderResult.source
           }
           set (value) {
               builderResult.hasSource = true
               builderResult.source = value
           }
      }
      public func setSource(value:String) -> Events.Error.Builder {
        self.source = value
        return self
      }
      public func clearSource() -> Events.Error.Builder{
           builderResult.hasSource = false
           builderResult.source = ""
           return self
      }
      public var hasCode:Bool {
           get {
                return builderResult.hasCode
           }
      }
      public var code:Int32 {
           get {
                return builderResult.code
           }
           set (value) {
               builderResult.hasCode = true
               builderResult.code = value
           }
      }
      public func setCode(value:Int32) -> Events.Error.Builder {
        self.code = value
        return self
      }
      public func clearCode() -> Events.Error.Builder{
           builderResult.hasCode = false
           builderResult.code = Int32(0)
           return self
      }
      public var hasMessage_:Bool {
           get {
                return builderResult.hasMessage_
           }
      }
      public var message_:String {
           get {
                return builderResult.message_
           }
           set (value) {
               builderResult.hasMessage_ = true
               builderResult.message_ = value
           }
      }
      public func setMessage_(value:String) -> Events.Error.Builder {
        self.message_ = value
        return self
      }
      public func clearMessage_() -> Events.Error.Builder{
           builderResult.hasMessage_ = false
           builderResult.message_ = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Events.Error.Builder {
        builderResult = Events.Error()
        return self
      }
      public override func clone() throws -> Events.Error.Builder {
        return try Events.Error.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Events.Error {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Events.Error {
        let returnMe:Events.Error = builderResult
        return returnMe
      }
      public func mergeFrom(other:Events.Error) throws -> Events.Error.Builder {
        if other == Events.Error() {
         return self
        }
        if other.hasSource {
             source = other.source
        }
        if other.hasCode {
             code = other.code
        }
        if other.hasMessage_ {
             message_ = other.message_
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Events.Error.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.Error.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            source = try input.readString()

          case 16 :
            code = try input.readInt32()

          case 26 :
            message_ = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
