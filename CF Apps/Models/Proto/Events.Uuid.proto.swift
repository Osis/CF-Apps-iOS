// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file uuid.proto

import Foundation
import ProtocolBuffers


public extension Events{}

public func == (lhs: Events.Uuid, rhs: Events.Uuid) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLow == rhs.hasLow) && (!lhs.hasLow || lhs.low == rhs.low)
  fieldCheck = fieldCheck && (lhs.hasHigh == rhs.hasHigh) && (!lhs.hasHigh || lhs.high == rhs.high)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Events {
  public struct UuidRoot {
    public static var sharedInstance : UuidRoot {
     struct Static {
         static let instance : UuidRoot = UuidRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  /// Type representing a 128-bit UUID.
  // The bytes of the UUID should be packed in little-endian **byte** (not bit) order. For example, the UUID `f47ac10b-58cc-4372-a567-0e02b2c3d479` should be encoded as `UUID{ low: 0x7243cc580bc17af4, high: 0x79d4c3b2020e67a5 }`
  final public class Uuid : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var low:UInt64 = UInt64(0)

    public private(set) var hasLow:Bool = false
    public private(set) var high:UInt64 = UInt64(0)

    public private(set) var hasHigh:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasLow {
        return false
      }
      if !hasHigh {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasLow {
        try output.writeUInt64(1, value:low)
      }
      if hasHigh {
        try output.writeUInt64(2, value:high)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLow {
        serialize_size += low.computeUInt64Size(1)
      }
      if hasHigh {
        serialize_size += high.computeUInt64Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Events.Uuid> {
      var mergedArray = Array<Events.Uuid>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Events.Uuid? {
      return try Events.Uuid.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Events.Uuid {
      return try Events.Uuid.Builder().mergeFromData(data, extensionRegistry:Events.UuidRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Events.Uuid {
      return try Events.Uuid.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Events.Uuid {
      return try Events.Uuid.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.Uuid {
      return try Events.Uuid.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Events.Uuid {
      return try Events.Uuid.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.Uuid {
      return try Events.Uuid.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Events.Uuid.Builder {
      return Events.Uuid.classBuilder() as! Events.Uuid.Builder
    }
    public func getBuilder() -> Events.Uuid.Builder {
      return classBuilder() as! Events.Uuid.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Events.Uuid.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Events.Uuid.Builder()
    }
    public func toBuilder() throws -> Events.Uuid.Builder {
      return try Events.Uuid.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Events.Uuid) throws -> Events.Uuid.Builder {
      return try Events.Uuid.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasLow {
        output += "\(indent) low: \(low) \n"
      }
      if hasHigh {
        output += "\(indent) high: \(high) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLow {
               hashCode = (hashCode &* 31) &+ low.hashValue
            }
            if hasHigh {
               hashCode = (hashCode &* 31) &+ high.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Events.Uuid"
    }
    override public func className() -> String {
        return "Events.Uuid"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Events.Uuid.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Events.Uuid = Events.Uuid()
      public func getMessage() -> Events.Uuid {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasLow:Bool {
           get {
                return builderResult.hasLow
           }
      }
      public var low:UInt64 {
           get {
                return builderResult.low
           }
           set (value) {
               builderResult.hasLow = true
               builderResult.low = value
           }
      }
      public func setLow(value:UInt64) -> Events.Uuid.Builder {
        self.low = value
        return self
      }
      public func clearLow() -> Events.Uuid.Builder{
           builderResult.hasLow = false
           builderResult.low = UInt64(0)
           return self
      }
      public var hasHigh:Bool {
           get {
                return builderResult.hasHigh
           }
      }
      public var high:UInt64 {
           get {
                return builderResult.high
           }
           set (value) {
               builderResult.hasHigh = true
               builderResult.high = value
           }
      }
      public func setHigh(value:UInt64) -> Events.Uuid.Builder {
        self.high = value
        return self
      }
      public func clearHigh() -> Events.Uuid.Builder{
           builderResult.hasHigh = false
           builderResult.high = UInt64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Events.Uuid.Builder {
        builderResult = Events.Uuid()
        return self
      }
      public override func clone() throws -> Events.Uuid.Builder {
        return try Events.Uuid.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Events.Uuid {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Events.Uuid {
        let returnMe:Events.Uuid = builderResult
        return returnMe
      }
      public func mergeFrom(other:Events.Uuid) throws -> Events.Uuid.Builder {
        if other == Events.Uuid() {
         return self
        }
        if other.hasLow {
             low = other.low
        }
        if other.hasHigh {
             high = other.high
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Events.Uuid.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Events.Uuid.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            low = try input.readUInt64()

          case 16 :
            high = try input.readUInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
